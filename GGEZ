local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "GGEZ",
   Icon = 0,
   LoadingTitle = "GGEZ",
   LoadingSubtitle = "by GGEZ",
   Theme = "Default",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "GGEZ"
   },
})

local FarmTab = Window:CreateTab("Farm", 4483362458)

-- Variables for features
local autoFarming = false
local bringMobEnabled = false
local espEnabled = false
local speedHackEnabled = false
local jumpHackEnabled = false
local noclipEnabled = false
local flyEnabled = false
local aimbotEnabled = false
local aimbotThread

-- Function to find the nearest target
local function getNearestTarget()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local closestTarget = nil
    local closestDistance = math.huge

    for _, target in pairs(game.Players:GetPlayers()) do
        if target ~= player and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (target.Character.HumanoidRootPart.Position - character.HumanoidRootPart.Position).magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestTarget = target
            end
        end
    end

    return closestTarget
end

-- Function to aim at the target
local function aimAtTarget(target)
    local player = game.Players.LocalPlayer
    local camera = workspace.CurrentCamera
    if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = target.Character.HumanoidRootPart.Position
        local direction = (targetPosition - camera.CFrame.Position).unit
        camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + direction)
    end
end

-- Aimbot loop
local function aimbotLoop()
    while aimbotEnabled do
        local target = getNearestTarget()
        aimAtTarget(target)
        wait(0.1) -- Adjust the aim frequency as needed
    end
end

-- Toggle for Aimbot
local ToggleAimbot = FarmTab:CreateToggle({
   Name = "Aimbot",
   CurrentValue = false,
   Flag = "AimbotToggle",
   Callback = function(Value)
       aimbotEnabled = Value
       if Value then
           aimbotThread = game:GetService("RunService").RenderStepped:Connect(function()
               aimAtTarget(getNearestTarget())
           end)
       else
           if aimbotThread then
               aimbotThread:Disconnect()
               aimbotThread = nil
           end
       end
   end,
})

-- Function to bring mobs to the player (example implementation)
local function bringMob()
    if bringMobEnabled then
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        for _, mob in pairs(workspace:GetChildren()) do
            if mob:IsA("Model") and mob:FindFirstChild("Humanoid") then
                mob:SetPrimaryPartCFrame(character.PrimaryPart.CFrame)
            end
        end
    end
end

-- Auto-farm loop
local function autoFarmLoop()
    while autoFarming do
        bringMob() -- Bring mobs if enabled
        wait(2) -- Adjust the wait time as necessary
    end
end

-- Toggle for Auto-Farming
local ToggleAutoFarm = FarmTab:CreateToggle({
   Name = "Auto-Farm Mobs",
   CurrentValue = false,
   Flag = "AutoFarmToggle",
   Callback = function(Value)
       autoFarming = Value
       if Value then
           autoFarmLoop()
       end
   end,
})

-- Toggle for bringing mobs
local ToggleBringMob = FarmTab:CreateToggle({
   Name = "Bring Mob",
   CurrentValue = false,
   Flag = "BringMobToggle",
   Callback = function(Value)
       bringMobEnabled = Value
   end,
})

-- Toggle for ESP (example)
local ToggleESP = FarmTab:CreateToggle({
   Name = "ESP for Players and Mobs",
   CurrentValue = false,
   Flag = "ESPToggle",
   Callback = function(Value)
       espEnabled = Value
       -- Add ESP functionality here (e.g., create boxes or markers)
   end,
})

-- Toggle for Speed Hack
local ToggleSpeedHack = FarmTab:CreateToggle({
   Name = "Speed Hack",
   CurrentValue = false,
   Flag = "SpeedHackToggle",
   Callback = function(Value)
       speedHackEnabled = Value
       local player = game.Players.LocalPlayer
       if Value then
           player.Character.Humanoid.WalkSpeed = 50 -- Set to desired speed
       else
           player.Character.Humanoid.WalkSpeed = 16 -- Reset to default speed
       end
   end,
})

-- Toggle for Jump Hack
local ToggleJumpHack = FarmTab:CreateToggle({
   Name = "Jump Hack",
   CurrentValue = false,
   Flag = "JumpHackToggle",
   Callback = function(Value)
       jumpHackEnabled = Value
       local player = game.Players.LocalPlayer
       if Value then
           player.Character.Humanoid.JumpPower = 100 -- Set to desired jump power
       else
           player.Character.Humanoid.JumpPower = 50 -- Reset to default jump power
       end
   end,
})

-- Toggle for Noclip (example)
local ToggleNoclip = FarmTab:CreateToggle({
   Name = "Noclip",
   CurrentValue = false,
   Flag = "NoclipToggle",
   Callback = function(Value)
       noclipEnabled = Value
       local player = game.Players.LocalPlayer
       local character = player.Character or player.CharacterAdded:Wait()
       if Value then
           -- Enable noclip
           character.Humanoid.Changed:Connect(function()
               if noclipEnabled then
                   local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local noclipEnabled = false

-- Function to toggle noclip
local function toggleNoclip()
    noclipEnabled = not noclipEnabled
    if noclipEnabled then
        humanoid.PlatformStand = true -- Disable normal physics

        -- Disable collision
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end

        -- Update position to allow noclip movement
        while noclipEnabled do
            wait()
            local camera = workspace.CurrentCamera
            local moveDirection = Vector3.new(0, 0, 0)

            -- Check for movement inputs
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveDirection = moveDirection + camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveDirection = moveDirection - camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveDirection = moveDirection - camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveDirection = moveDirection + camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                moveDirection = moveDirection + Vector3.new(0, 1, 0) -- Move up
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                moveDirection = moveDirection - Vector3.new(0, 1, 0) -- Move down
            end

            -- Move the character
            character:TranslateBy(moveDirection * 5 * wait()) -- Adjust speed as needed
        end

        -- Re-enable collision
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end

        humanoid.PlatformStand = false -- Re-enable normal physics
    end
end

-- Bind the toggle function to a key (e.g., "N" key)
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.N then
        toggleNoclip()
    end
end)
   end,
})

-- Toggle for Fly (example)
local ToggleFly = FarmTab:CreateToggle({
   Name = "Fly",
   CurrentValue = false,
   Flag = "FlyToggle",
   Callback = function(Value)
       flyEnabled = Value
    local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local flying = false
local flySpeed = 50 -- Adjust this value for speed

-- Function to toggle flying
local function toggleFly()
    flying = not flying
    if flying then
        humanoid.PlatformStand = true -- Disable normal physics
        while flying do
            wait(0.1)
            local direction = Vector3.new(0, 0, 0)

            -- Get user input for flying
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                direction = direction + workspace.CurrentCamera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                direction = direction - workspace.CurrentCamera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                direction = direction - workspace.CurrentCamera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                direction = direction + workspace.CurrentCamera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                direction = direction + Vector3.new(0, 1, 0) -- Fly up
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                direction = direction - Vector3.new(0, 1, 0) -- Fly down
            end

            -- Move the character
            character:TranslateBy(direction * flySpeed * 0.1)
        end
        humanoid.PlatformStand = false -- Re-enable normal physics
    end
end

-- Bind the toggle function to a key (e.g., "F" key)
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.F then
        toggleFly()
    end
end)
   end,
})

-- Slider for an additional feature (example)
local Slider = FarmTab:CreateSlider({
   Name = "Slider Example",
   Range = {0, 100},
   Increment = 10,
   Suffix = "Value",
   CurrentValue = 10,
   Flag = "Slider1",
   Callback = function(Value)
       print("Slider value: " .. Value)
       -- Add logic here to use the slider value for any specific feature
   end,
})

-- Example button to execute a specific action
local ActionButton = FarmTab:CreateButton({
   Name = "Execute Action",
   Callback = function()
       print("Executing action...")
       -- Add the specific action you want to perform here
   end,
})

-- Another toggle for a different farming feature (example)
local ToggleFeatureX = FarmTab:CreateToggle({
   Name = "Feature X",
   CurrentValue = false,
   Flag = "FeatureXToggle",
   Callback = function(Value)
       if Value then
           print("Feature X enabled.")
           -- Add logic for Feature X here
       else
           print("Feature X disabled.")
       end
   end,
})
